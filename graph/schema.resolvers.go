package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.50

import (
	"context"
	"github.com/Lux00000/PostsAndComments/internal/models"
	"github.com/Lux00000/PostsAndComments/server"
)

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, authorID string, allowComments bool) (*models.Post, error) {
	post := &models.Post{
		Title:         title,
		Content:       content,
		AuthorID:      authorID,
		AllowComments: allowComments,
	}
	return r.PostService.CreatePost(post)
}

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID string, parentCommentID *string, authorID string, text string) (*models.Comment, error) {
	comment := &models.Comment{
		PostID:          postID,
		ParentCommentID: parentCommentID,
		AuthorID:        authorID,
		Text:            text,
	}
	return r.CommentService.CreateComment(comment)
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context, page *int, pageSize *int) ([]*models.Post, error) {
	if page == nil {
		page = new(int)
		*page = 1
	}
	if pageSize == nil {
		pageSize = new(int)
		*pageSize = 10
	}
	return r.PostService.GetAllPosts(*page, *pageSize)
}

// GetPostByID is the resolver for the GetPostById field.
func (r *queryResolver) GetPostByID(ctx context.Context, id int) (*models.Post, error) {
	return r.PostService.GetPostByID(id)
}

// CommentsSubscription is the resolver for the CommentsSubscription field.
func (r *subscriptionResolver) CommentsSubscription(ctx context.Context, postID string) (<-chan *models.Comment, error) {
	return r.CommentService.CommentsSubscription(postID)
}

// Mutation returns MutationResolver implementation.
func (r *server.Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *server.Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *server.Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *server.Resolver }
type queryResolver struct{ *server.Resolver }
type subscriptionResolver struct{ *server.Resolver }
